#!/usr/bin/env python

# stdlib imports
import argparse
import configparser
import os.path
import sys

# local imports
from getintensity.tools import IntensityParser

# This code ensures that this uses impactutils from this directory
# and not the conda-installed one.  Right now, the conda version does not
# yet have support for NRESPS and INTENSITY_STDDEV
import os
sys.path.insert(0, os.getcwd())
from impactutils.io.table import dataframe_to_xml


def get_parser():
    description = '''
    Download DYFI data from Comcat or an external source into a local data
    directory.

    getintensity EVENTID [--extid  EXTERNALID] [--network NETWORK] [--minresp 3]

    For example,

    getintensity us70004jxe                 # will read from Comcat
    getintensity us70004jxe --network ga    # will attempt to find GA ID
    getintensity nc72282711 --network emsc  # will attempt to find EMSC ID
    getintensity us70004jxe --extid ga2019nsodfc --network ga
    getintensity us70004jxe --inputfile felt_reports_1km.geojson --network ga

    Supported networks:
        neic    National Earthquake Information Center (USA)
        ga      Geosciences Australia
        emsc    European-Mediterranean Seismic Center

    If --network is missing, this will attempt to guess it from extid or
    input filename.

    '''
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('eventid',
                        help='ComCat ID of the event to process')
    parser.add_argument('--inputfile',
                        help='Use file instead of loading from ComCat')
    parser.add_argument('--extid',
                        help='Event ID from other network (OPTIONAL)')
    parser.add_argument('--network',
                        help='Network abbreviation')
    parser.add_argument('--file',
                        help='Download to Excel file specified')
    parser.add_argument('--minresp',default=3,
                        help='Ignore stations will nresp less than this (default 3')
    parser.add_argument('--config',
                        help='Config file',
                        default='config.ini')
    return parser


def main(args):
    config = configparser.ConfigParser()
    with open(args.config, 'r') as f:
        config.read_file(f)

    use_shakemap_path = (config['directories']['use_shakemap_path'] == 'yes')
    if use_shakemap_path:
        from shakemap.utils.config import get_config_paths
        install_path, data_path = get_config_paths()

    else:
        data_path = config['directories']['default_data_path']

    if not os.path.isdir(data_path):
        print('%s is not a valid directory.' % data_path)
        sys.exit(1)

    config['directories']['data_path'] = data_path

    eventid = args.eventid
    inputfile = args.inputfile
    extid = args.extid
    network = args.network
    df = None

    iparser = IntensityParser(config=config, eventid=eventid,
                              extid=extid, network=network)

    # is there an input file?
    if inputfile:
        # If network is blank, this will attempt to figure out the network
        # from the file during parsing
        df, msg = iparser.get_dyfi_dataframe_from_file(inputfile)
        network = iparser.network

    elif (not network and not extid) or (network == 'neic'):
        # Requesting Comcat data only
        network = 'neic'
        extid = extid or eventid
        df, msg = iparser.get_dyfi_dataframe_from_network(extid, network=network)

    elif network:
        extid = extid or iparser.get_extid_from_network(eventid, network)
        if not extid:
            print('Could not find external ID %s in %s.' % (eventid, network))
            sys.exit(0)

        df, msg = iparser.get_dyfi_dataframe_from_network(extid=extid)

    elif extid:
        network = network or iparser.get_network_from_id(extid)
        if not network:
            print('Could not determine network for ID', extid)
            sys.exit(0)
        print('Determined this network to be:', network)
        iparser.network = network
        df, msg = iparser.get_dyfi_dataframe_from_network(extid=extid)

    if df is None:
        print(msg)
        print('No DYFI data found, exiting.')
        sys.exit(0)

    if args.file:
        df.to_excel(args.file, index=False)
        print('Saved %i records to %s. Exiting.' % (len(df), args.file))
        sys.exit(0)

    # check to see if the event directory exists
    if use_shakemap_path:
        event_dir = os.path.join(data_path, eventid, 'current')
        if not os.path.isdir(event_dir):
            fmt = 'Event %s does not exist in this installation.  Run ' \
                '"sm_create %s" first.'
            print(fmt % (eventid, eventid))
            sys.exit(1)
    else:
        event_dir = data_path

    reference = iparser.reference
    outfile = iparser.default_outfile

    outfile = os.path.join(event_dir, outfile)
    dataframe_to_xml(df, outfile, reference)
    if 'INTENSITY_STDDEV' not in df.columns:
        print('WARNING: Datafile has no column INTENSITY_STDDEV.')
        print(df.columns)
    if 'NRESP' not in df.columns:
        print('WARNING: Datafile has no column NRESP.')
    print('Saved DYFI data to %s.' % outfile)
    sys.exit(0)


if __name__ == '__main__':
    parser = get_parser()
    pargs = parser.parse_args()
    main(pargs)
