#!/usr/bin/env python

# stdlib imports
import argparse
import os.path
import sys

# local imports
from shakemap.utils.config import get_config_paths
from impactutils.io.table import dataframe_to_xml
import getintensity.tools as gi

# Put this in getintensity module instead
COMCAT_TEMPLATE = 'https://earthquake.usgs.gov/fdsnws/event/1/query?' \
                  'eventid=[EID]&format=geojson'
GA_TEMPLATE = 'https://cdn.gagempa.net/skip/events/' \
                    '[EXTID]/[GEOJSONFILE]'


def get_parser():
    description = '''
    Download DYFI data from Comcat or an external source into a local data
    directory.

    getintensity EVENTID [--extid  EXTERNALID] [--network NETWORK]

    For example,

    getintensity us70004jxe                 # will read from Comcat
    getintensity us70004jxe --network ga    # will attempt to find GA ID
    getintensity us70004jxe --network emsc  # will attempt to find EMSC ID
    getintensity us70004jxe --extid ga2019nsodfc --network ga
    getintensity us70004jxe --inputfile felt_reports_1km.geojson --network ga

    Supported networks:
        neic    National Earthquake Information Center (USA)
        ga      Geosciences Australia
        emsc    European-Mediterranean Seismic Center

    '''
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('eventid',
                        help='ComCat ID of the event to process')
    parser.add_argument('--inputfile',
                        help='Use file instead of loading from ComCat')
    parser.add_argument('--extid',
                        help='Event ID from other network (OPTIONAL)')
    parser.add_argument('--network',
                        help='Network abbreviation')
    parser.add_argument('--file',
                        help='Download to Excel file specified')
    return parser


def main(args):
    install_path, data_path = get_config_paths()
    if not os.path.isdir(data_path):
        print('%s is not a valid directory.' % data_path)
        sys.exit(1)

    eventid = args.eventid
    inputfile = args.inputfile
    extid = args.extid
    network = args.network
    dataframe = None

    # is there an input file?
    if inputfile:
        # If network is blank, this will attempt to figure out the network
        # from the file during parsing
        network, dataframe, msg = gi.get_dyfi_dataframe_from_file(
            eventid, inputfile, network)

    elif (not network and not extid) or (network == 'neic'):
        # are we requesting Comcat data only?
        extid = extid or eventid
        dataframe, msg = gi.get_dyfi_dataframe_from_comcat(extid)

    elif network:
        extid = gi.get_extid_from_network(eventid, network)
        dataframe, msg = gi.get_dyfi_dataframe_from_network(
            eventid, extid, network)

    elif extid:
        network = gi.get_network_from_id(extid)
        dataframe, msg = gi.get_dyfi_dataframe_from_network(
            eventid, extid, network)

    if dataframe is None:
        print(msg)
        print('No DYFI data found, exiting.')
        sys.exit(0)

    if args.file:
        dataframe.to_excel(args.file, index=False)
        print('Saved %i records to %s. Exiting.' % (len(dataframe), args.file))
        sys.exit(0)

    # check to see if the event directory exists
    event_dir = os.path.join(data_path, eventid, 'current')
    if not os.path.isdir(event_dir):
        fmt = 'Event %s does not exist in this installation.  Run ' \
              '"sm_create %s" first.'
        print(fmt % (eventid, eventid))
        sys.exit(1)

    reference = 'USGS Did You Feel It? System'
    outfile = os.path.join(event_dir, 'dyfi_dat.xml')
    dataframe_to_xml(dataframe, outfile, reference)
    print('Saved DYFI data to %s.' % outfile)
    sys.exit(0)


if __name__ == '__main__':
    parser = get_parser()
    pargs = parser.parse_args()
    main(pargs)
